#!/usr/bin/env python3

import rospy
import cv2
import face_recognition
from sensor_msgs.msg import Image
from std_msgs.msg import String
from cv_bridge import CvBridge, CvBridgeError
from joblib import load
import os

class FaceRecognitionNode:
    def __init__(self):
        self.bridge = CvBridge()
        self.clf = None
        
        # Load the trained SVM model
        model_path = '/home/murilo/lisa/lisa_desktop/modelo_svm_face_recognition.joblib'
        if os.path.exists(model_path):
            self.clf = load(model_path)
            rospy.loginfo("SVM model loaded successfully.")
        else:
            rospy.logerr("Model file not found. Please check the path.")
            return
        
        # Only subscribe to the topic after loading the model
        self.image_sub = rospy.Subscriber("/Imagens", Image, self.image_callback)
        self.name_pub = rospy.Publisher("/recognized_name", String, queue_size=10)

    def image_callback(self, msg):
        if self.clf is None:
            return

        try:
            # Convert ROS Image message to OpenCV image
            cv_image = self.bridge.imgmsg_to_cv2(msg, "passthrough")
        except CvBridgeError as e:
            rospy.logerr("CvBridge Error: {0}".format(e))
            return

        # Process the image and find face encodings and locations
        rgb_image = cv2.cvtColor(cv_image, cv2.COLOR_BGR2RGB)
        face_locations = face_recognition.face_locations(rgb_image)
        face_encodings = face_recognition.face_encodings(rgb_image, face_locations)

        # Predict the names for the detected faces
        recognized_names = []
        for encoding in face_encodings:
            try:
                name = self.clf.predict([encoding])[0]
                recognized_names.append(name)
            except Exception as e:
                rospy.logerr(f"Prediction error: {e}")

        # Publish the recognized names
        for name in recognized_names:
            self.name_pub.publish(name)
            rospy.loginfo(f"Recognized: {name}")

def main():
    rospy.init_node('face_recognition_node', anonymous=True)
    face_recognition_node = FaceRecognitionNode()
    try:
        rospy.spin()
    except KeyboardInterrupt:
        rospy.loginfo("Shutting down")

if __name__ == '__main__':
    main()
